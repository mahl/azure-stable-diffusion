#cloud-config

write_files:
  - path: /etc/ssh/sshd_config
    append: true
    content: |
      Port ${SSH_PORT}
      Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr

  - path: /etc/fail2ban/jail.d/defaults-debian.conf
    content: |
      [sshd]
      enabled = true
      port = ${SSH_PORT}

  - path: /root/preflight.sh
    permissions: 0755
    content: |
      #!/bin/bash
      . /etc/environment
      echo "--> Removing snapd so it doesn't cause extra load on smaller VMs"
      apt-get purge -y snapd unattended-upgrades
      rm -rf /snap /var/snap /var/lib/snapd /var/log/unattended-upgrades
      echo "--> Package updates"
      apt-get update
      apt-get dist-upgrade -y
      apt-get autoremove -y

      echo "--> Installing Tailscale"
      # Note: this is handy for easier remote access
      curl -fsSL https://tailscale.com/install.sh | sh

      echo "--> Installing NVIDIA drivers"
      ubuntu-drivers autoinstall
      apt-get install -y nvidia-cuda-toolkit

      echo "--> Installing Python 3.10"
      apt-get install -y software-properties-common
      add-apt-repository ppa:deadsnakes/ppa -y
      apt-get install -y python3.10 python3.10-dev python3.10-venv python3.10-distutils
      update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
      # Note: this breaks Ubuntu subtly, so make sure to run all apt installs previously

      echo "--> Setting up scratch"
      # Make sure we can write to the temporary SSD storage
      mkdir -p /mnt/scratch
      chmod a+w /mnt/scratch
      
      # Everything from here on down is run as a regular user
      sudo -i -u ${ADMIN_USERNAME} bash << EOF
      echo "--> Setting up cache"
      rm -rf ~/.cache
      mkdir -p /mnt/scratch/.cache
      # ln -s /mnt/scratch/.cache ~/.cache

      echo "--> Cloning repositories"
      bash <(wget -qO- https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui/master/webui.sh)
      cd ~/stable-diffusion-webui
      # Make generated content persistent in the mounted file share so we can destroy the VM at will
      mkdir -p /srv/outputs
      ln -s /srv/outputs outputs
      cd ~/stable-diffusion-webui/models/Stable-diffusion
      echo "--> Downloading precompiled attention model"
      wget -q -O model.ckpt https://raw.githubusercontent.com/TheLastBen/fast-stable-diffusion/main/precompiled/attention.py
      source ~/stable-diffusion-webui/venv/bin/activate

      echo "--> Downloading Huggingface data"
      cd /mnt/scratch
      git init
      git lfs install --skip-repo
      git config core.sparsecheckout true
      echo "--> RunwayML SD 1.5"
      git clone --branch fp16 "https://USER:${HUGGINGFACE_TOKEN}@huggingface.co/runwayml/stable-diffusion-v1-5"
      git clone --branch fp16 "https://USER:${HUGGINGFACE_TOKEN}@huggingface.co/runwayml/stable-diffusion-inpainting"
      echo "--> StabilityAI Autoencoders"
      git clone "https://USER:${HUGGINGFACE_TOKEN}@huggingface.co/stabilityai/sd-vae-ft-mse"
      echo "--> StabilityAI SD 2.0"
      git clone --branch fp16 "https://USER:${HUGGINGFACE_TOKEN}@huggingface.co/stabilityai/stable-diffusion-2"

      echo "--> Patching SD 1.5 with Autoencoders"
      rm -r stable-diffusion-v1-5/vae
      rm -r stable-diffusion-inpainting/vae
      cp -r sd-vae-ft-mse stable-diffusion-v1-5/vae        
      mv sd-vae-ft-mse stable-diffusion-inpainting/vae
      
      # Retrieve and patch the model converter in a sane fashion
      wget -O convertosd.py https://github.com/TheLastBen/fast-stable-diffusion/raw/main/Dreambooth/convertosd.py
      sed -i '8s@.*@import os@' convertosd.py
      sed -i '201s@.*@    model_path = os.environ["MODEL_PATH"]@' convertosd.py
      sed -i '202s@.*@    checkpoint_path = os.environ["CHECKPOINT_PATH"]@' convertosd.py

      echo "--> Converting Stable Diffusion 1.5 model"
      MODEL_PATH=stable-diffusion-v1-5 CHECKPOINT_PATH=/home/${ADMIN_USERNAME}/stable-diffusion-webui/models/Stable-diffusion/runwayml-sd-v1-5.ckpt python3 convertosd.py
      echo "--> Converting Stable Diffusion 1.5 inpainting model"
      MODEL_PATH=stable-diffusion-inpainting CHECKPOINT_PATH=/home/${ADMIN_USERNAME}/stable-diffusion-webui/models/Stable-diffusion/runwayml-sd-v1-5-inpainting.ckpt python3 convertosd.py
      echo "--> Copying Stable Diffusion 2.0 model"
      wget -O /home/${ADMIN_USERNAME}/stable-diffusion-webui/models/Stable-diffusion/768-v-ema.yaml https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/configs/stable-diffusion/v2-inference-v.yaml
      cp stable-diffusion-2/768-v-ema.ckpt /home/${ADMIN_USERNAME}/stable-diffusion-webui/models/Stable-diffusion/768-v-ema.ckpt
 
      echo "--> installing Extensions"
      cd ~/stable-diffusion-webui
      git clone https://github.com/yfszzx/stable-diffusion-webui-images-browser extensions/stable-diffusion-webui-images-browser
      git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui-aesthetic-gradients extensions/aesthetic-gradients
      git clone https://github.com/pharmapsychotic/clip-interrogator-ext extensions/clip-interrogator-ext
      git clone https://github.com/vladmandic/sd-extension-system-info extensions/sd-extension-system-info
      git clone https://github.com/Mikubill/sd-webui-controlnet.git extensions/sd-webui-controlnet
      EOF

      echo "==> Preflight done."

  - path: /root/controlled-shutdown.sh
    permissions: 0755
    content: |
      #!/bin/bash
      HOSTNAME=`hostname`
      # TODO

  - path: /root/spot-helper.py
    permissions: 0755
    content: |
      #!/usr/bin/env python3

      # Leave the machine in an orderly state when the spot instance is preempted or scheduled for maintenance

      from subprocess import check_output
      from socket import gethostname
      from time import sleep
      from json import loads
      from urllib.request import Request, urlopen
      from urllib.parse import urlencode

      METADATA_URL = "http://169.254.169.254/metadata/scheduledevents?api-version=2017-11-01"
      
      def get_scheduled_events():
          req = Request(METADATA_URL)
          req.add_header('Metadata', 'true')
          res = urlopen(req)
          data = loads(res.read())
          return data

      def acknowledge_event(event_id):
          req = Request(METADATA_URL, urlencode({"StartRequests":[{"EventId":event_id}]}))
          req.add_header('Metadata', 'true')
          res = urlopen(req)
          data = res.read()
          return data

      def handle_events(data):
          hostname = gethostname()
          for event in data['Events']:
              if hostname in event['Resources'] and event['EventType'] in ['Reboot', 'Redeploy', 'Preempt']:
                  check_output('/root/controlled-shutdown.sh', shell=True)
                  acknowledge_event(event['EventId'])

      if __name__ == '__main__':
          while(True):
             sleep(15)
             handle_events(get_scheduled_events())

  - path: /etc/systemd/system/spot-helper.service
    permissions: 0444
    content: |
      [Unit]
      Description=Azure Spot Instance Events
      DefaultDependencies=no
      After=multi-user.target
      [Service]
      Type=oneshot
      ExecStart=/root/spot-helper.py
      [Install]
      WantedBy=multi-user.target

  - path: /etc/waagent.conf
    permissions: 0444
    content: |
      ResourceDisk.Format=y
      ResourceDisk.Filesystem=ext4
      ResourceDisk.EnableSwap=y
      ResourceDisk.SwapSizeMB=2048

mounts:
  - - //${STORAGE_ACCOUNT_NAME}.file.core.windows.net/${SHARE_NAME}
    - /srv
    - cifs
    - vers=3.0,username=${STORAGE_ACCOUNT_NAME},password=${STORAGE_ACCOUNT_KEY},dir_mode=0770,file_mode=0660,uid=1000,gid=1000,noperm,noatime,mfsymlinks,iocharset=utf8

packages:
  - build-essential
  - curl
  - fail2ban
  - git-lfs
  - golang
  - htop
  - make
  - net-tools
  - ntp
  - stow
  - sudo
  - tmux
  - ubuntu-drivers-common
  - vim
  - wget
  
runcmd:
  # - systemctl enable spot-helper
  - /root/preflight.sh
  - reboot